names(safe)
library(openxlsx)
link="https://github.com/EvansDataScience/data/raw/master/safeCitiesIndexAll.xlsx"
safe=read.xlsx(link)
names(safe)
# all the questions with this: "H_In_"
grep("H_In_", colnames(safe) ) # ^ means starts with
# the 'head' of only those:
positionsIN=grep("H_In_", colnames(safe) )
head(safe[,c(1,positionsIN)])
pairs(safe[,c(positionsIN)])
library(ggplot2)
library(GGally) # may need to install
ggcorr(safe[,-1], # all but the first column
hjust = 0.9,# distance to plot (diagonal)
size=1, # font size
layout.exp=4, # width so that variable names are shown
low = 'red',high = 'blue') # color scale
base= ggcorr(safe[,-1],size=1,layout.exp=4,hjust=0.9,
nbreaks = 3, # 3 intervals
palette = "PuOr")
base + guides(fill=guide_legend("some title")) # if you need a title for legend
library(reshape)
safeA=melt(safe,
id.vars = 'city') # the unit of analysis
head(safeA)
base = ggplot(data = safeA, aes(x = variable,
y =city))
heat1= base +  geom_tile(aes(fill = value))
heat1
#inverse color -1
heat2 = heat1 + scale_fill_distiller(palette = "RdYlGn",direction = 1)
heat2
heat2 + theme(axis.text.x = element_text(angle = 90,
hjust = 1,
size = 4),
axis.text.y = element_text(size = 4))
# change in REORDER
base= ggplot(data = safeA, aes(x = reorder(variable,
value, median, order=TRUE),
y =reorder(city,
value, median, order=TRUE)))
# THIS IS THE SAME
base + geom_tile(aes(fill = value)) +
scale_fill_distiller(palette = "RdYlGn",direction = 1) +
theme(axis.text.x = element_text(angle = 90, hjust = 1,size = 4),
axis.text.y = element_text(size = 4))
library(openxlsx)
link2="https://github.com/EvansDataScience/data/raw/master/safeCitiesIndex.xlsx"
safe2=read.xlsx(link2)
head(safe2)
safe2A=melt(safe2,id.vars = 'city')
head(safe2A)
base  = ggplot(safe2A, aes(x = variable, y = value, group = city))
plot1 = base + geom_polygon(fill = 'gray',col='orange') + coord_polar()
plot2 = plot1 + facet_wrap(~city,# one plot per city
ncol = 10) # ten plot per row
plot2
plot2 = plot1 + facet_wrap(~reorder(city,value, median, order=TRUE),ncol = 7)
plot3 = plot2 + theme(axis.text.x = element_text(size = 8))
plot3
plot3 = plot2 + theme(axis.text.x = element_text(size = 8),
legend.position="none",
strip.text = element_text(size = 20)) #here!!!
plot3
### arguments
brdBkgnGrid=element_rect(fill = "white",colour = "red",
size = 3,linetype = "dashed")
lineGrid=element_line(size = 3,linetype = 'solid',colour = "blue")
### more customization
plot3+ theme(panel.background = brdBkgnGrid,
panel.grid.major = lineGrid)
# copy data
safe2x=safe2
head(safe2x)
# get minimun value by row
safe2x$min=apply(safe2x[,c(2:5)],1,min)
# turn this min values into a ranking
safe2x$min=rank(safe2x$min,ties.method ='first' )
# order city by ranking
cityRk=as.factor(safe2x[order(safe2x$min),]$city)
# turn city into ordered factor
safe2x$city=factor(safe2x$city,
levels= cityRk,
labels = cityRk,
ordered = T)
# delete column with ranks
safe2x$min=NULL
head(safe2x)
str(safe2x)
library(ggiraph)
base = ggRadar(safe2x,aes(group='city'),legend.position="none")
library(ggiraph)
install.packages("ggiraph")
library(ggiraph)
library(ggiraph)
base = ggRadar(safe2x,aes(group='city'),legend.position="none")
some=c("Manila","Lima", "Washington DC","Tokyo")
subSafe=safe2x[safe2x$city %in% some,]
base = ggRadar(subSafe,aes(group='city'),
alpha = 0,legend.position="top")
library(psych)
install.packages("psych")
library(psych)
#copy
safeCopy=safe
resultPCA=principal(safeCopy[,-1],
nfactors = 1,
scores=T,
normalize=T)
resultPCA$Vaccounted[[2]]
safeCopy$indexSafe=as.vector(factor.scores(safeCopy[,-1],resultPCA)$scores)
head(safeCopy[,c(49:51)]) # just the last three columns
# pysch has its own 'rescale'
safeCopy$indexSafe=scales::rescale(safeCopy$indexSafe, to = c(1, 100))
# you get:
head(safeCopy[,c(49:51)])
safeCopy$RankSafe=rank(-safeCopy$indexSafe)
head(safeCopy[,c(51:52)])
# IN/OUT
positionsIN=grep("_In_", colnames(safe) )
positionsOUT=grep("_Out_", colnames(safe) )
#
safeIN=safe[,c(1,positionsIN)]
safeOUT=safe[,c(1,positionsOUT)]
### IN
resultIN=principal(safeIN[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeIN$indexSafeIN=as.vector(factor.scores(safeIN[,-1],resultIN)$scores)
safeIN$indexSafeIN=scales::rescale(safeIN$indexSafeIN,
to = c(1, 100))
safeIN$RankSafeIN=rank(-safeIN$indexSafeIN)
### OUT
resultOUT=principal(safeOUT[,-1],
nfactors = 1,
scores=T,
normalize=T)
safeOUT$indexSafeOUT=as.vector(factor.scores(safeOUT[,-1],resultOUT)$scores)
safeOUT$indexSafeOUT=scales::rescale(safeOUT$indexSafeOUT,
to = c(1, 100))
safeOUT$RankSafeOUT=rank(-safeOUT$indexSafeOUT)
safeIO=merge(safeIN,safeOUT)
ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city)) +
geom_point(colour="green") +geom_text(size=2)
ggplot(safeIO, aes(x= indexSafeIN, y= indexSafeOUT, label=city)) +
geom_point(colour="green") +geom_text(size=2)
library(ggrepel)
plot2 +  xlim(0, 50)+ylim(0,50)
library(ggiraph)
install.packages(c("evaluate", "mgcv", "modelr", "purrr", "raster", "stringi", "stringr"))
install.packages(c("evaluate", "mgcv", "modelr", "purrr", "raster", "stringi", "stringr"))
install.packages(c("evaluate", "mgcv", "modelr", "purrr", "raster", "stringi", "stringr"))
install.packages(c("evaluate", "mgcv", "modelr", "purrr", "raster", "stringi", "stringr"))
install.packages(c("evaluate", "mgcv", "modelr", "purrr", "raster", "stringi", "stringr"))
library(ggiraph)
names(mental)=c("Days","Frequency")
names(mental)=c("Days","Frequency")
library(ggiraph)
library(ggiraph)
library("ggiraph", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:ggiraph", unload=TRUE)
install.packages("gdtools")
install.packages("ggiraph")
install.packages("ggiraphExtra")
library(ggiraph)
names(mental)=c("Days","Frequency")
title2="Days in the Past Month of Reported Negative Mental Health"
mentaldays=table(brfssdata$mental,exclude = 0)
#call libraries:
library(haven)
library(ggplot2)
datalink='https://dl.dropboxusercontent.com/s/xhs2utpj1wntmzt/BRFSSFinalSup.dta'
brfssdata=read_dta(datalink)
# barplot
title1="Interview Year"
source1="BRFSS Survey Data 2000-2018"
year=table(brfssdata$year)
color=rainbow(length(year)) # customizing set of colors
yearord=sort(year)
# barplot(yearord,col=color,main=title1,sub=source1,ylab='Number of Interviews',xlab="Year",)
View(brfssdata)
View(brfssdata)
# barplot
title1="Interview Year"
source1="BRFSS Survey Data 2000-2018"
year=table(brfssdata$year)
color=rainbow(length(year)) # customizing set of colors
yearord=sort(year)
# barplot(yearord,col=color,main=title1,sub=source1,ylab='Number of Interviews',xlab="Year",)
yeargg=as.data.frame(year)
names(yeargg)=c("Year","Frequency")
yearplot=ggplot(data= yeargg, aes(x=Year, y=Frequency))
yearplot2=yearplot + labs(title=title1, x=NULL, y=NULL,caption=source1)
yearplot3 = yearplot2 + geom_hline(yintercept = 200000, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.5) #transparency
yearplot4 = yearplot3 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
plotyear = yearplot4 + geom_bar(fill ="grey",
stat = 'identity')
plotyear
title2="Days in the Past Month of Reported Negative Mental Health"
mentaldays=table(brfssdata$mental,exclude = 0)
mentaldays0=table(brfssdata$mental)
mental=as.data.frame(mentaldays)
barplot(mentaldays)
barplot(mentaldays0)
names(mental)=c("Days","Frequency")
mentalplot=ggplot(data= mental, aes(x=Days, y=Frequency))
mentalplot2 = mentalplot + geom_bar(fill ="grey",
stat = 'identity')
mentalplot3 = mentalplot2 + labs(title=title2, x=NULL, y=NULL,caption=source1)
mentalplot3
library(ggiraph)
#making a subset:
anovaData=crimeY2000[crimeY2000$YearsToReport>=5,]
link="https://github.com/EvansDataScience/data/raw/master/crime.RData"
load(file = url(link))
names(crime)
#making a subset:
anovaData=crimeY2000[crimeY2000$YearsToReport>=5,]
#making a subset:
anovaData=crimeY2000[crimeY2000$YearsToReport>=5,]
crimeY2000=crime[(crime$DaysToReport>=365) & (crime$year>=2000),]
tapply(crimeY2000$DaysToReport,crimeY2000$Precinct,length)
#making a subset:
anovaData=crimeY2000[crimeY2000$YearsToReport>=5,]
#checking the mean per factor value:
tapply(anovaData$YearsToReport, anovaData$Precinct, mean,na.rm=T)
names(mental)=c("Days","Frequency")
mentalplot=ggplot(data= mental, aes(x=Days, y=Frequency))
mentalplot2 = mentalplot + geom_bar(fill ="grey",
stat = 'identity')
mentalplot3 = mentalplot2 + labs(title=title2, x=NULL, y=NULL,caption=source1)
mentalplot3
summary(brfssdata)
#making a subset:
anovaData=crimeY2000[crimeY2000$YearsToReport>=5,]
#checking the mean per factor value:
tapply(anovaData$YearsToReport, anovaData$Precinct, mean,na.rm=T)
library(Rmisc)
tapply(brfssdata$mental,brfssdata$stab,mean)
tapply(brfssdata$mental,brfssdata$stab,mean,exclude = 'NA')
tapply(brfssdata$mental,brfssdata$stab,mean,exclude = 'nothing')
tapply[complete.cases(brfssdata$mental,brfssdata$stab,mean,exclude = 'nothing'))
tapply[complete.cases(brfssdata$mental,brfssdata$stab,mean))
tapply[complete.cases(brfssdata$mental,brfssdata$stab,mean)]
names(mental)=c("Days","Frequency")
mentalplot=ggplot(data= mental, aes(x=Days, y=Frequency))
mentalplot2 = mentalplot + geom_bar(fill ="grey",
stat = 'identity')
mentalplot3 = mentalplot2 + labs(title=title2, x=NULL, y=NULL,caption=source1,) + omit.na[x]
tapply[complete.cases(brfssdata$mental,brfssdata$stab,mean)]
brfss=eduwa[complete.cases(brfssdata$mental),]
brfss=brfssdata[complete.cases(brfssdata$mental),]
brfss=brfssdata[complete.cases(brfssdata$mental),]
tapply[complete.cases(brfss$mental,brfss$stab,mean)]
tapply[complete.cases(brfssdata$mental,brfssdata$stab,mean)]
tapply[complete.cases(brfssdata$mental,brfssdata$stab,mean)]
tapply(brfssdata$mental,brfssdata$stab,mean)
brfss=brfssdata[complete.cases(brfssdata$mental),]
brfss=brfssdata[complete.cases(brfssdata$mental),]
tapply(brfss$mental,brfss$stab,mean)
#brfss=brfssdata[complete.cases(brfssdata$mental),]
#tapply(brfss$mental,brfss$stab,mean)
tapply(brfssdata$mental,brfssdata$stab,mean,na.rm=T)
brfss=brfssdata[complete.cases(brfssdata$mental),]
tapply(brfss$mental,brfss$stab,mean)
tapply(brfssdata$mental,brfssdata$stab,mean,na.rm=T)
brfss=brfssdata[complete.cases(brfssdata$mental),]
tapply(brfss$mental,brfss$stab,mean)
means=tapply(brfssdata$mental,brfssdata$stab,mean,na.rm=T)
brfss=brfssdata[complete.cases(brfssdata$mental),]
tapply(brfss$mental,brfss$stab,mean)
means=tapply(brfssdata$mental,brfssdata$stab,mean,na.rm=T)
means
datalong='policywide'
datawide='policywide'
datal=read_dta(datalong)
datalong='policywide.dta'
datawide='policywide.dta'
datal=read_dta(datalong)
dataw=read_dta(datawide)
View(datal)
View(datal)
View(dataw)
View(dataw)
yeargg=as.data.frame(year)
names(yeargg)=c("Year","Frequency")
yearplot=ggplot(data= yeargg, aes(x=Year, y=Frequency))
yearplot2=yearplot + labs(title=title1, x=NULL, y=NULL,caption=source1)
yearplot3 = yearplot2 + geom_hline(xintercept = "2014", #where
linetype="dashed",
size=1.5, #thickness
alpha=0.5) #transparency
yearplot4 = yearplot3 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
plotyear = yearplot4 + geom_bar(fill ="grey",
stat = 'identity')
plotyear
yeargg=as.data.frame(year)
names(yeargg)=c("Year","Frequency")
yearplot=ggplot(data= yeargg, aes(x=Year, y=Frequency))
yearplot2=yearplot + labs(title=title1, x=NULL, y=NULL,caption=source1)
yearplot3 = yearplot2 + geom_hline(yintercept = 200000, #where
linetype="dashed",
size=1.5, #thickness
alpha=0.5) #transparency
yearplot4 = yearplot3 + theme(panel.background = element_rect(fill = "white",
colour = "grey50"),
plot.caption = element_text(hjust = 0), # default was 1
plot.title = element_text(hjust = 0.5))
plotyear = yearplot4 + geom_bar(fill ="grey",
stat = 'identity')
plotyear
brfss=brfssdata[complete.cases(brfssdata$mental),]
tapply(brfss$mental,brfss$stab,mean)
means=tapply(brfssdata$mental,brfssdata$stab,mean,na.rm=T)
mex2000=as.data.frame(table(means)
brfss=brfssdata[complete.cases(brfssdata$mental),]
tapply(brfss$mental,brfss$stab,mean)
means=tapply(brfssdata$mental,brfssdata$stab,mean,na.rm=T)
mex00=tapply(brfssdata$mental,brfssdata$ex2000,mean,na.rm=T)
mex00
brfss=brfssdata[complete.cases(brfssdata$mental),]
tapply(brfss$mental,brfss$stab,mean)
means=tapply(brfssdata$mental,brfssdata$stab,mean,na.rm=T)
mex00=tapply(brfssdata$mental,brfssdata$ex2000,mean,na.rm=T)
mex00
mex00=tapply(brfssdata$mental,brfssdata$ex2000,mean,na.rm=T)
mex00
mex18=tapply(brfssdata$mental,brfssdata$ex2018,mean,na.rm=T)
mex18
mex18=tapply(brfssdata$mental,brfssdata$ex2018,mean,na.rm=T)
mex18
mex00=tapply(brfssdata$mental,brfssdata$year,mean,na.rm=T)
mex00
mex18=tapply(brfssdata$mental,brfssdata$ex2018,mean,na.rm=T)
mex18
title2="Days in the Past Month of Reported Negative Mental Health"
mentaldays=table(brfssdata$mental,exclude = 0)
mentaldays0=table(brfssdata$mental)
mental=as.data.frame(mentaldays)
barplot(mentaldays)
barplot(mentaldays0)
boxplot(mentaldays)
title2="Days in the Past Month of Reported Negative Mental Health"
mentaldays=table(brfssdata$mental,exclude = 0)
mentaldays0=table(brfssdata$mental)
mental=as.data.frame(mentaldays)
barplot(mentaldays)
barplot(mentaldays0)
boxplot(mentalday, shorizontal = T,ylim=c(5,30))
title2="Days in the Past Month of Reported Negative Mental Health"
mentaldays=table(brfssdata$mental,exclude = 0)
mentaldays0=table(brfssdata$mental)
mental=as.data.frame(mentaldays)
barplot(mentaldays)
barplot(mentaldays0)
boxplot(mentaldays, shorizontal = T,ylim=c(5,30))
title2="Days in the Past Month of Reported Negative Mental Health"
mentaldays=table(brfssdata$mental,exclude = 0)
mentaldays0=table(brfssdata$mental)
mental=as.data.frame(mentaldays)
barplot(mentaldays)
barplot(mentaldays0)
boxplot(as.numeric(mentaldays), shorizontal = T,ylim=c(5,30))
boxplot(mentaldays0, horizontal = T,ylim=c(5,30))
title2="Days in the Past Month of Reported Negative Mental Health"
mentaldays=table(brfssdata$mental,exclude = 0)
mentaldays0=table(brfssdata$mental)
mental=as.data.frame(mentaldays)
barplot(mentaldays)
barplot(mentaldays0)
```{r}
boxplot(as.numeric(mentaldays), shorizontal = F,ylim=c(0,30))
boxplot(mentaldays0, horizontal = T,ylim=c(5,30))
boxplot(as.numeric(mentaldays), horizontal = T,ylim=c(0,30))
boxplot(mentaldays0, horizontal = T,ylim=c(5,30))
boxplot(as.numeric(mental), horizontal = T,ylim=c(0,30))
boxplot(as.numeric(mentaldays), horizontal = T,ylim=c(0,30))
boxplot(mentaldays0, horizontal = T,ylim=c(5,30))
boxplot(as.numeric(mentaldays))
boxplot(mentaldays0, horizontal = T,ylim=c(5,30))
boxplot(as.numeric(mentaldays), horizontal = T,)
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(mentaldays0, horizontal = T,ylim=c(5,30))
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T)
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T,ylim=c(5,250000))
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T,ylim=c(5,220000))
names(mental)=c("Days","Frequency")
mentalplot=ggplot(data= mental, aes(x=Days, y=Frequency))
mentalplot2 = mentalplot + geom_bar(fill ="grey",
stat = 'identity')
mentalplot3 = mentalplot2 + labs(title=title2, x=NULL, y=NULL,caption=source1,)
title2="Days in the Past Month of Reported Negative Mental Health"
mentaldays=table(brfssdata$mental,exclude = 0)
mentaldays0=table(brfssdata$mental)
mental=as.data.frame(mentaldays)
barplot(mentaldays)
barplot(mentaldays0)
names(mental)=c("Days","Frequency")
mentalplot=ggplot(data= mental, aes(x=Days, y=Frequency))
mentalplot2 = mentalplot + geom_bar(fill ="grey",
stat = 'identity')
mentalplot3 = mentalplot2 + labs(title=title2, x=NULL, y=NULL,caption=source1,)
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T,ylim=c(5,220000))
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T,ylim=c(5,220000))
ggdat=as.data.frame(prop.table(table(brfss$mental)))
mentbox = ggplot(ggdat, aes(y=as.numeric(mental)))
mentbox
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T,ylim=c(5,220000))
ggdat=as.data.frame(table(brfss$mental))
mentbox = ggplot(ggdat, aes(y=as.numeric(mental)))
mentbox
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T,ylim=c(5,220000))
ggdat=as.data.frame(brfss)
mentbox = ggplot(ggdat, aes(y=as.numeric(mental)))
mentbox
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T,ylim=c(5,220000))
ggdat=as.data.frame(brfss)
mentbox = ggplot(ggdat, aes(y=as.numeric(mental)))
mentbox1 = mentbox + geom_boxplot() + coord_flip()
mentbox1
boxplot(as.numeric(mentaldays), horizontal = T)
boxplot(as.numeric(mentaldays0), horizontal = T,ylim=c(5,220000))
View(ggdat)
View(ggdat)
